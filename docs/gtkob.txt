		    The GTKobjectification project


This document outlines the ideas of the conversion to using the GTK
object system in gimp core.


The basic problem with gimp's internals is that it is _old_. Some of
the stuff dates from the 0.54 era, before layers, before GTK. This has 
caused the current source to be what some people call a "mess". You
don't want to hear what the other people call it.

Some of the main problems are that there are far, far too many headers 
included everywhere. That is, encapsulation doesn't work. This causes
nasty dependencies, and doesn't exactly do good for compile times,
either. In addition, there are too much integer ids on objects. These
should only be used for pdb, and even there there'd probably be better 
ways of passing them. The gtk object system will better facilitate
data hiding and encapsulation.

Then there are the tools. The tools have a primitive object hierarchy, 
but it is a mess when compared to gtk's system. Restructuring the
tools will make the world a better place, and new tools easier to
implement.

GTK's object system has many other features that will make gimp
programming easier, the chief one being signals. When gimp's images
and displays have signals that you can connect callbacks to, different 
components of the program will be better able to keep up with the
state of things.

Also, having all types in the gimp core use a standard object system
will make it easier to export these types as CORBA objects when the
time comes for that.


As for the classes involved, here's a very preliminary listing..


Images


 Signals:
  dirty
  rename
  repaint


GimpSet

GimpSet is a new type, though it will probably be temporary. It is
basically a frontend to GHashTable, to work with the currently used id 
system. Also, it is needed to connect to signals when something gets created.

 Signals:
  add (gpointer)
  remove (gpointer)


Displays

These will be made into gtk widgets proper.


Tools (and subclasses)

The existing hierarchy has to be converted to gtk.


Drawables (and subclasses)

These are already gtkobjects.


Selections


Regions


Tile managers


Tiles

These are rather primitive objects, they might not necessarily need to 
be gtkobjectified.



Design principles


The idea of gtkobjectification is to make things more OO. This means
that classes should be as isolated from each other as possible. There
is high level code and lower level code, and lower level code should
never ever call higher level code. For example, the image class should 
_not_ call up message boxes to notify errors. Instead, it should
return an error value (or use global variables a la errno, but these
are not thread-safe).

The best way to think about it is to see gimp as an an application
that provides an interactive gtk interface, as well as the
programmable pdb api, to control image manipulation operations.

Optimally, these image manipulation functions will be completely
separate from any other code (well, besides gtk's object system &
deps). The fact is that the current gimp executable is far too
big. In addition to the messiness, linking takes too much time. The
real objective is to encapsulate all the image manipulation code into
a separate library. Not because it would be useful generically (though 
that is definitely a possibility!) but because it will add
abstraction.
